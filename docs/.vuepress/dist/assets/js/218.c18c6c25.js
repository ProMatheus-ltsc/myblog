(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{1501:function(e,t,a){"use strict";a.r(t);var s=a(65),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"chapter-7-lambdas-and-streams-λ-表达式和流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-7-lambdas-and-streams-λ-表达式和流"}},[e._v("#")]),e._v(" Chapter 7. Lambdas and Streams（λ 表达式和流）")]),e._v(" "),a("h3",{attrs:{id:"chapter-7-introduction-章节介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-7-introduction-章节介绍"}},[e._v("#")]),e._v(" Chapter 7 Introduction（章节介绍）")]),e._v(" "),a("p",[e._v("In Java 8, functional interfaces, lambdas, and method references were added to make it easier to create function objects. The streams API was added in tandem with these language changes to provide library support for processing sequences of data elements. In this chapter, we discuss how to make best use of these facilities.")]),e._v(" "),a("p",[e._v("在 Java 8 中，为了更容易地创建函数对象，添加了函数式接口、lambda 表达式和方法引用；流 API 也与这些语言特性一并添加进来，为处理数据元素序列提供库支持。在这一章中，我们将讨论如何最好地利用这些工具。")])])}),[],!1,null,null,null);t.default=r.exports}}]);